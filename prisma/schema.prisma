datasource db {
    provider = "mongodb"
    url = env("DATABASE_URL")
    relationMode = "prisma"
}


generator client {
    provider = "prisma-client-js"
}



model Type{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    typeName String 
    
    locations Location[]
}

model Duration{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    onSiteTime Int

    locations Location[]
}

model Price{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    priceRange String

    locations Location[]
}

model Confort{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    confortLevel String

    locations Location[]
}

model Intensity{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    intensityLevel String

    locations Location[]
}

model Image{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    imageName String

    locationId String @db.ObjectId

    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

    @@index([locationId])
}

model Theme{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    themeName String

    locations ThemeLocation[]
}

model ThemeLocation{
    id String @id @default(auto()) @map("_id") @db.ObjectId

    locationId String @db.ObjectId
    themeId String @db.ObjectId

    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)

    @@index([locationId, themeId])
}

model Companion{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    companionName String

    locations CompanionLocation[]
}

model CompanionLocation{
    id String @id @default(auto()) @map("_id") @db.ObjectId

    locationId String @db.ObjectId
    companionId String @db.ObjectId

    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

    @@index([locationId, companionId])
}


model Location {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    locationName String
    description String 
    address String
    city String
    zipcode String
    phoneNumber String
    website String
    latitude Float 
    longitude Float

    isApproved Boolean @default(false)
    isActive Boolean @default(false)

    typeId String @db.ObjectId
    durationId String @db.ObjectId
    priceId String @db.ObjectId
    confortId String @db.ObjectId
    intensityId String @db.ObjectId

    type Type @relation(fields: [typeId], references: [id], onDelete: Cascade)
    duration Duration @relation(fields: [durationId], references: [id], onDelete: Cascade)
    price Price @relation(fields: [priceId], references: [id], onDelete: Cascade)
    confort Confort @relation(fields: [confortId], references: [id], onDelete: Cascade)
    intensity Intensity @relation(fields: [intensityId], references: [id], onDelete: Cascade)

    @@index([typeId, durationId, priceId, confortId])

    images Image[]
    themes ThemeLocation[]
    companions CompanionLocation[]
}



// npx prisma generate
// npx prisma db push
